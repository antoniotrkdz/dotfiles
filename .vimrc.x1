set nocompatible "IMproved, required
"This command makes vim start a file with all folds closed
"set foldlevelstart=0
"-----------------------------------------------------------
"Plugins
"-----------------------------------------------------------{{{
"Autoinstall vim plug if not already installed
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

"set the runtime path to include Vundle and initialise
call plug#begin('~/.vim/plugged')

"Git wrapper
Plug 'tpope/vim-fugitive'
"Symbols for git changes tracking
Plug 'airblade/vim-gitgutter'
"NERDTree
Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'
"Commenter
Plug 'scrooloose/nerdcommenter'
"YouCompleteMe + tern completer - javascript
Plug 'Valloric/YouCompleteMe', { 'do': './install.py --js-completer' }
Plug 'ternjs/tern_for_vim'
" Ale Async Linting (+formatting) as you type
Plug 'w0rp/ale'
" Autoformat for other files (not js)
Plug 'chiel92/vim-autoformat'
"Language specific
Plug 'pangloss/vim-javascript'
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-rails'
"wisely add 'end' in ruby (maybe bash)
Plug 'tpope/vim-endwise'
"Added vim snippets for code autofilling
Plug 'SirVer/ultisnips'
"Emmet for HTML editing, <c-y>, to trigger completion
Plug 'mattn/emmet-vim'
"Colour preview in code
Plug 'ap/vim-css-color'
"Always highlights the enclosing XML/HTML tags 
Plug 'valloric/matchtagalways'
"Airline bottom bar (and top one)
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
"Patched fonts needed to display fancy airline
"Copy the desired font(s) in .local/share/fonts
"set the required font(s) in the console settings
Plug 'powerline/fonts'
"Surround - surround or change the surround an item with "''() etc.
Plug 'tpope/vim-surround'
"Doubles quotes and parenthesis on the fly
Plug 'raimondi/delimitmate'
"UNIX shell commands
Plug 'tpope/vim-eunuch'
"Fuzzy files search (also avialble in bash)
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
"CtrlP Fuzzy search
Plug 'ctrlpvim/ctrlp.vim'
"Multiple cursors
Plug 'terryma/vim-multiple-cursors'
"Underlines a word element
Plug 'itchyny/vim-cursorword'
"Help for vim in vim
Plug 'lifepillar/vim-cheat40'
"Easy: <leader><leader>f<letter> you want to move to
Plug 'easymotion/vim-easymotion'
"Markdown editor (git READMEs)
Plug 'shime/vim-livedown'
"Database completion
Plug 'vim-scripts/dbext.vim'
"Bash fixer/linter
Plug 'z0mbix/vim-shfmt', { 'for': 'sh' }
"Themes (for GUI and CLI)
Plug 'KeitaNakamura/neodark.vim'
"Plug 'desert256.vim'
Plug 'rainux/vim-desert-warm-256'
Plug 'rakr/vim-one'
Plug 'tyrannicaltoucan/vim-quantum'

Plug 'PotatoesMaster/i3-vim-syntax'

call plug#end()

"Mappings (make sure there are no spaces at the end!)
"nnoremap <Space> i
inoremap jk <esc>
inoremap kj <esc>
vnoremap v <esc>
nnoremap <silent> <F2> :NERDTreeTabsToggle<CR>
noremap <F3> :Autoformat<CR>
noremap <F4> :ALEFix<CR>
"Open the current file in default browser
nnoremap <F5> :exec '!sensible-browser % &'<CR>
"Search the word under the cursor in file folder.
noremap <F8> :execute "vimgrep /" . expand("<cword>") . "/j **" <Bar> cw<CR>
"Shortcut to rapidly toggle `set list`
nnoremap <leader>l :set list!<CR>
"Turn on/off incremental search (search as you type)
nnoremap <leader>i :set incsearch!<CR>
"Highlight search results
nnoremap <Leader>h :set hlsearch<CR>
"Remove highlights with leader + enter
nnoremap <Leader><CR> :nohlsearch<CR>
"Shortcuts to cicle through the buffers
nnoremap <Tab> :bnext<CR>
nnoremap <S-Tab> :bprevious<CR>
"Livedow markdown previewer toggle on/off
"nnoremap gm :LivedownToggle<CR>
nnoremap <F6> :LivedownToggle<CR>

"Disable all error bells
set belloff=all

"Visual bell for errors
"set visualbell

"line number and relative line number
set number
set relativenumber
set ruler

"show the command as it's being typed
set showcmd

"Shares the system clipboard
"set clipboard=unnamed
set clipboard=unnamedplus

"Set one line to be always shown below or above the cursor
set scrolloff=1

"Set to split always right
"set splitright

"Set some 'sensible' defaults
set tabstop=2
set shiftwidth=2
set expandtab
set smarttab
set autoindent
set backspace=indent,eol,start
set complete-=i
"set list!
set listchars=tab:‚ñ∏\ ,eol:¬¨,trail:¬∑,space:¬∑
"tab:‚ñπ\ ,

"Alternative menu
"set wildmenu

"Avoid producing any extraneous files
set nobackup
set nowritebackup
set noswapfile

"Avoid showing the mode on the last line
set noshowmode

"guiheadroom, room (in pixels) left above/below the window
set ghr=0

"guipty	use a pseudo-tty for I/O to external commands
set guipty	"noguipty

"Searching
set ignorecase
"set incsearch "handled by <leader>i


"Set colors and fonts
syntax on
filetype on           " Enable filetype detection
filetype indent on    " Enable filetype-specific indenting
filetype plugin on    " Enable filetype-specific plugins56

if has('gui_running')
    set background=dark
    set termguicolors
    "Black background (before colorscheme=quantum)
    let g:quantum_black=1
    colorscheme quantum
    "colorscheme neodark

    "To italicize comments:
    let g:quantum_italics=1

    set guifont=Hack\ 11
    set guioptions-=T "remove the toolbar 

elseif &term == "rxvt-unicode-256color" || &term == "xterm-256color"
    set t_Co=2set nocompatible      " We're running Vim, not Vi!
    colorscheme one
    set background=dark
    "colorscheme neodark
    "To use 256-color in both of vim and gvim:
    "let g:neodark#use_256color = 1 " default: 0
    "To use your default terminal background:
    "let g:neodark#terminal_transparent = 1 " default: 0
else
    set t_Co=8
endif

"Highlight for the matching parenthesis.
highlight MatchParen guibg=#212121 guifg=#00ff00

"Highlight for the trailing space
highlight ExtraWhitespace ctermbg=red guibg=#ff0000
autocmd Syntax * syn match ExtraWhitespace /\s\+$\| \+\ze\\t/

"Option for Match HTML Tag plugin
let g:mta_filetypes = {'html': 1, 'xhtml': 1, 'xml': 1, 'jinja': 1, 'javascript': 1}

"NERDTree configuration
let NERDTreeShowHidden=1
"Get rid of the "? show help...
let NERDTreeMinimalUI=1
"NERDTree Default window size
"let g:NERDTreeWinSize = 25
"Make NERDTree window resizable
"let NERDTreeWinSize=1

"Airline configuration
"Always dispalays airline
set laststatus=2

let g:airline#extensions#tabline#enabled = 1

if has('gui_running')
    let g:airline_theme='quantum'
else
    let g:airline_theme = 'onedark'
endif

let g:airline_powerline_fonts = 1

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '¬ª'
let g:airline_left_sep = '‚ñ∂'
let g:airline_right_sep = '¬´'
let g:airline_right_sep = '‚óÄ'
let g:airline_symbols.linenr = '‚êä'
let g:airline_symbols.linenr = '‚ê§'
let g:airline_symbols.linenr = '¬∂'
let g:airline_symbols.branch = '‚éá'
let g:airline_symbols.paste = 'œÅ'
let g:airline_symbols.paste = '√û'
let g:airline_symbols.paste = '‚à•'
let g:airline_symbols.whitespace = 'Œû'

" airline symbols
let g:airline_left_sep = 'ÓÇ∞'
let g:airline_left_alt_sep = 'ÓÇ±'
let g:airline_right_sep = 'ÓÇ≤'
let g:airline_right_alt_sep = 'ÓÇ≥'
let g:airline_symbols.branch = 'ÓÇ†'
let g:airline_symbols.readonly = 'ÓÇ¢'
let g:airline_symbols.linenr = 'ÓÇ°'

"NERDCommenter settings
" Add spaces after comment delimiters by default
"let g:NERDSpaceDelims = 1
" Use compact syntax for prettified multi-line comments
"let g:NERDCompactSexyComs = 1
" Align line-wise comment delimiters flush left instead of following code indentation
"let g:NERDDefaultAlign = 'left'
" Set a language to use its alternate delimiters by default
"let g:NERDAltDelims_java = 1
" Add your own custom formats or override the defaults
"let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }
" Allow commenting and inverting empty lines (useful when commenting a region)
"let g:NERDCommentEmptyLines = 1
" Enable trimming of trailing whitespace when uncommenting
"let g:NERDTrimTrailingWhitespace = 1

"YouCompleteMe configuration
"Tern configuration
let g:tern_show_argument_hints = 'on_hold'
let g:tern_map_keys = 1
let g:tern_show_signature_in_pum = 1

"Highlight settings for YouCompleteMe hints
highlight Pmenu ctermfg=7 ctermbg=0
highlight PmenuSel ctermfg=0 ctermbg=7

"Turn off the preview (opening a scratch buffer) from the YouCompleteMe menu
set completeopt-=preview

"This will make YCM and Eclim play nice
"let g:EclimCompletionMethod = 'omnifunc'

"ALE configuration
let g:ale_fixers = {'javascript': [ 'prettier', 'eslint' ], 'ruby': ['rubocop'], 'bash': ['shfmt']}
"let g:ale_fixers['javascript'] = [ 'prettier', 'eslint' ]
"let g:ale_fixers['html'] = [ 'tidy' ]
"let g:ale_fixers['ruby'] = [ 'rubocop' ]
let g:ale_javascript_prettier_options ='--tab-width 2 --single-quote --no-bracket-spacing --trailing-comma es5'
let g:ale_echo_msg_format = '%linter%: %s [%severity%]'
"let g:ale_sign_column_always = 1
"let g:ale_sign_error         = '--'
"let g:ale_sign_error         = '‚úò'
"let g:ale_sign_warning       = 'üî∏'
"let g:ale_sign_warning       = '‚ö†Ô∏è'
let g:ale_linters = {'jsx': ['eslint'], 'sql': ['sqlint'], 'ruby':['rubocop'], 'bash': ['shellcheck']}
let g:ale_linter_aliases = {'jsx': 'css'}
"let g:ale_set_highlights = 0
"let g:ale_statusline_format = ['‚®â %d', '‚ö† %d', '‚¨• OK']
